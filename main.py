"""
This modules takes as input the file generated by Stanford NER, and looks for the recognized entities.
For every entity, it looks on wikipedia for the article without doing any kind of preprocessing, query generation, or
any feature extraction.
If it finds a candidate article (any article), it assigns it to the entity.
If it doesn't, it classifies the entity as NIL.
"""

import wptools
import xml.etree.ElementTree as ET
from model import Mention

IGNORED_ENTITY_TYPES = {"ORDINAL", "NUMBER", "DATE", "PERCENT"}


class MentionDetector:

    def __init__(self, file_name):
        self.file_name = file_name


    def get_mentions(self):
        tree = ET.parse(self.file_name)
        root = tree.getroot()

        doc_id = root[0].find("docId").text

        result = []
        previous_type = None

        for sentence in root[0].find("sentences"):
            for token in sentence[0]:
                entity_type = token.find("NER")

                if entity_type != 'O' and entity_type not in IGNORED_ENTITY_TYPES:
                    mention = create_mention(token)

                    if entity_type == previous_type:
                        result[-1].add(mention)
                    else:
                        result.append(mention)

                previous_type = entity_type

        return result

    @staticmethod
    def create_mention(line):
        pass


def link_mentions(mentions):
    result = []
    for mention in mentions:
        try:
            page = wptools.page(mention.string).get_query()
        except LookupError:
            page = None

        result.append(LinkedMention(mention, page))

    return result
